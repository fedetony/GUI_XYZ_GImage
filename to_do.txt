
Todo:

(Done)-Get Marlin config 
-Get Machine info info from Config: ACC max feedrate steps/mm etc...
-Set Machine Config defaults in Configuration <-> check if same prompt to replace if different.

-Stream:
qstream when >100 lines else use normal send. (Not necessary) ->qstream starts immediately
-Use simulate to set buffer times to send.(No simulation, can'T be accurate with different machines)
-Buffered streaming by buffer size-> specially when no autopositioning (Currently size is number of lines, is made by size)
-Start from any position, line, run just a portion or lines. (Done)
Log streaming process last position, last code and line sent (finished)

Simulate position->while running for visualize too.
Visualization-> sycronyze with stream

You can use the same batton generic structure for visualization. Add a Visualization Batton and a read from machine


position (Machine and program)(instantaneous and set),
state, 
Feedrate/speed (instantaneous and set)
graphic->realtime simulation. (Laser view, drawview,3D print view,CNC view) 
Queue of commands as in lasergrbl but 

Move transform -> Long moves Separate into smaller movements to be able to pause/ stop in the middle

Gimage:
-Gimage needs to be updated to use CCD, is just producing Marlin code.
-Configuration is difficult to use.

Gimage config
  
 G transforms-> 
 spatial coordinates, Scaling,rotating etc 
 or power S255 to S1000
 or code replaced by other code M106 by M3
 
 Calculate intensities for laser. (Power <-> speed) (also to reduce power on acceleration)
 -Fill following curves,hatching, crosshatching
 -Vectorize and curve fitting->Vectorize to parametric, bezier curves.
 -Draw filling contours
 
VBD class: 
 Battons types:
 pushbutton, 2 state, Click on/off -> (Done)
 knobs/slide
 timer  
 visualization batton
 Save/Load batton structs -> (Done)
 Linking for loops
 
 Loops:
 Allow variables (parameters)
 Sendcmd->Read Machine response.
 put loop/action in queue-> run queue
 Do actions with the battons-> just run Gcode, Send to text/file
 Set multiple actions in queue-> then run.
 Wait for user click
 Param inputs->outputs
 connect battons
 let if/for/while/
 
Maybe:
Add parallel port, -> parsing and simulating all signals
 
 
